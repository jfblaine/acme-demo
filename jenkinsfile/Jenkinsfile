pipeline {
    agent any
    options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 20, unit: 'MINUTES')
    } //options
    environment {
        DEV_NS = "acme-dev"
        APP_NAME = "py-helloworld"
        APP_BLDR_IMG = "registry.access.redhat.com/ubi8/python-36"
        GIT_URL = "https://github.com/jfblaine/acme-demo.git"
        GIT_BRANCH = "master"
        HELM_CHART_DIR = "helm-deploy"
        OCP_REG_URL = "image-registry.openshift-image-registry.svc:5000"
    }
    stages {
        stage('Create and execute pi job') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            if (openshift.selector('jobs', 'pi').exists()) {
                                openshift.selector('jobs', 'pi').delete()
                            }
                            def job = [
                                "apiVersion": "batch/v1",
                                "kind": "Job",
                                "metadata": [
                                    "name": "pi",
                                    "labels": [
                                        "foo":"bar"
                                    ]
                                ],
                                "spec": [
                                    "template": [
                                        "spec": [
                                            "containers": [[
                                                "name": "pi",
                                                "image": "image-registry.openshift-image-registry.svc:5000/openshift/perl",
                                                "command": ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
                                                ]
                                            ],
                                            "restartPolicy": "Never"
                                        ]
                                    ],
                                    "backoffLimit": 4
                                ]
                            ]
                            def objs = openshift.create( job, '--save-config', '--validate' )
                            objs.describe()
                            def podselector = openshift.selector( 'po', [ 'job-name': 'pi' ] )
                            podselector.watch {
                                return podselector.status.phase == 'Running'
                            }
                            podselector.logs('-f')
                        }
                    }
                }
            } // steps
        } // stage
    } // stages
} // pipeline
